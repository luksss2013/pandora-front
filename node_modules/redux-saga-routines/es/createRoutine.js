import { createAction } from 'redux-actions';
import routineStages from './routineStages';

var isFunction = function isFunction(value) {
  return typeof value === 'function';
};

export default function createRoutine(typePrefix, payloadCreator, metaCreator) {
  var getCreatorForType = function getCreatorForType(type, creator) {
    if (!creator) {
      return creator;
    }

    if (isFunction(creator[type])) {
      return creator[type];
    }

    if (isFunction(creator[type.toLowerCase()])) {
      return creator[type.toLowerCase()];
    }

    if (isFunction(creator)) {
      return creator;
    }

    return undefined;
  };

  var createActionCreator = function createActionCreator(type) {
    return createAction(typePrefix + "/" + type, getCreatorForType(type, payloadCreator), getCreatorForType(type, metaCreator));
  };

  return routineStages.reduce(function (result, stage) {
    var _Object$assign;

    var actionCreator = createActionCreator(stage);
    return Object.assign(result, (_Object$assign = {}, _Object$assign[stage.toLowerCase()] = actionCreator, _Object$assign[stage.toUpperCase()] = actionCreator.toString(), _Object$assign));
  }, createActionCreator(routineStages[0]));
}