import { AnyAction } from 'redux';
import { ThunkAction } from 'redux-thunk';
export interface AbortAction {
    type: string;
}
export declare type ActionMutator<A extends FetchStateAction> = (action: A) => AnyAction;
export interface Actions {
    onAbort?: ActionMutator<AbortAction> | Object;
    onReject?: ActionMutator<RejectAction> | Object;
    onRequest?: ActionMutator<RequestAction> | Object;
    onResolve?: ActionMutator<ResolveAction> | Object;
}
interface Conditional {
    (state?: Object): boolean;
}
declare type FetchAction = ThunkAction<Promise<void>, any, void, AnyAction>;
export interface FetchActionCreator {
    default?: FetchActionCreator;
    (id: string, input: Request | string, init: Init, actions: Actions, conditional?: Conditional): FetchAction;
}
declare type FetchStateAction = AbortAction | RejectAction | RequestAction | ResolveAction;
declare type Init = RequestInit | ((state?: Object) => RequestInit);
export interface RejectAction {
    error: Object | string;
    headers: Headers | null;
    statusCode: null | number;
    type: string;
}
export interface RequestAction {
    abortController: AbortController | null;
    type: string;
}
export interface ResolveAction {
    body: Object | string;
    headers: Headers;
    statusCode: number;
    type: string;
}
export {};
